/**
 * xrmoptimize.js
 *
 * Because xrm.js is dumb, this optimizes the list generated by it.
 */
'use strict';

/**
 * Importing modules.
 */
const fs = require('fs'),
      util = require('./util.js');

/**
 * Constants.
 */
const REGEX = /^\* \[\[w:c:([^:]+):Special:Contribs\/([^|]+)\|[^\]]+\]\] \((\d+)%\)$/,
      unique = {},
      results = {};

/**
 * Global variables.
 */
let users = [],
    wiki = null,
    counts = null,
    wikis = [];

/**
 * Checks the number of user contributions for each user.
 * @param {String} ucstart API parameter to resume reading user contributions
 */
function checkUsers(ucstart) {
    const usr = users.splice(0, 50);
    if (!usr.length) {
        // eslint-disable-next-line no-use-before-define
        nextWiki();
        return;
    }
    util.apiQuery(`https://${wiki}.fandom.com`, {
        list: 'usercontribs',
        uclimit: 'max',
        ucstart,
        ucuser: usr.join('|')
    }).then(function(d) {
        d.query.usercontribs.forEach(function(c) {
            if (!counts[c.user]) {
                counts[c.user] = 0;
            }
            ++counts[c.user];
        });
        if (d['query-continue']) {
            checkUsers(d['query-continue'].usercontribs.ucstart);
        } else {
            results[wiki] = results[wiki].filter(u => counts[u] <= 3);
            checkUsers();
        }
    });
}

/**
 * Callback after writing to file.
 * @param {Error} error Error that occurred while writing to file
 */
function fileWriteCallback(error) {
    if (error) {
        console.error('An error occurred while writing to file:', error);
    } else {
        console.info('Finished!');
    }
}

/**
 * Visits the next wiki.
 */
function nextWiki() {
    wiki = wikis.shift();
    if (!wiki) {
        let text = '';
        for (const w in results) {
            text += results[w].map(
                r => `* [[w:c:${w}:Special:Contribs/${r}|${w}:${r}]]\n`
            ).join('');
        }
        fs.writeFile('results/xrmoptimize.txt', text, fileWriteCallback);
        return;
    }
    console.debug('Fetching', wiki);
    users = results[wiki].slice(0);
    counts = {};
    checkUsers();
}

/**
 * Callback after reading xrm.js's results.
 * @param {Error} error Error that occurred
 * @param {Buffer} data File contents
 */
function fileCallback(error, data) {
    if (error) {
        console.error('An error occurred while reading XRM results');
    } else {
        data.toString().split('\n').forEach(function(line) {
            if (!line) {
                return;
            }
            const res = REGEX.exec(line),
                  w = res[1],
                  user = res[2],
                  key = `${w}:${user}`;
            if (!unique[key]) {
                unique[key] = true;
                if (!results[w]) {
                    results[w] = [];
                }
                results[w].push(user);
            }
        });
        wikis = Object.keys(results);
        nextWiki();
    }
}

console.info('Reading xrm.js results...');
fs.readFile('results/xrm.txt', fileCallback);
